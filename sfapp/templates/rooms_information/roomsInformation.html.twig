{% extends 'base.html.twig' %}

{% block title %}Informations de la salle {{ room.name }} - Smart Campus{% endblock %}

{% block stylesheets %}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href='https://fonts.googleapis.com/css?family=Lalezar' rel='stylesheet'>
    <link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" />

    <style>
        #temperatureChart, #humidityChartHistory, #co2ChartHistory {
            background-color: #effeff;
            border-radius: 15px;
            padding: 10px;
            margin: 10px;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="main-title">
        <h1>Informations de la salle {{ room.name }}</h1>
    </div>
    <div class="widget-container">
        <div class="widget-component-minimised widget-component-position" style="margin: 15px">
            <h2 class="widget-component-title">Informations</h2>

            <!-- Global container -->
            <div class="chart-wrapper-perfect">
                <!-- CO2 Arc -->
                <div class="chart-item-perfect">
                    <canvas id="co2Chart" width="240" height="240"></canvas>
                    <div class="chart-label-perfect-left">
                        <p>
                            <span class="co2-font"> CO2 </span>
                            <br>
                            {% if data.co2 is defined %}
                                <span {% if data.co2 > 1500 %} class="red-font" {% endif %}>
                                    {{ data.co2|number_format(0, ' ', ' ') }} PPM
                                </span>
                            {% else %}
                                <span>---</span>
                            {% endif %}
                        </p>
                    </div>
                </div>

                <!-- Temperature in the center -->
                <div class="center-data">
                    <p class="temp-font">Temp.</p>
                    <p class="temperature">
                        {% if data.temp is defined %}
                            <span {% if data.temp < 17 or data.temp > 25 %} class="red-font" {% endif %}>
                                {{ data.temp|number_format(1, ',', ' ') }}°C
                            </span>
                        {% else %}
                            <span>---</span>
                        {% endif %}
                    </p>
                </div>

                <!-- Humidity Arc -->
                <div class="chart-item-perfect">
                    <canvas id="humidityChart" width="240" height="240"></canvas> <!-- Adjusted -->
                    <div class="chart-label-perfect-right">
                        <p>
                            <span class="hum-font"> Humidité </span>
                            <br>
                            {% if data.hum is defined %}
                                <span {% if data.hum < 40 or data.hum > 70 %} class="red-font" {% endif %}>
                                    {{ data.hum|number_format(1, ',', ' ') }}%
                                </span>
                            {% else %}
                                <span>---</span>
                            {% endif %}
                        </p>
                    </div>
                </div>
            </div>
            <p class="time">Données relevées à {{ data.lastCapture|date("H:i") }}</p>
        </div>

        <div class="widget-component-minimised widget-component-position" style="margin: 15px">
            <h2 class="widget-component-title">Conseils</h2>
            <div class="column">
                {% if notifications is not empty %}
                    {% for notification in notifications %}
                        <h5 class="notification-line">{{ notification }}</h5>
                    {% endfor %}
                {% else %}
                    <p>Aucune notification à afficher.</p>
                {% endif %}
            </div>
        </div>
    </div>

    <div class="widget-component-minimised widget-component-position" style="margin: 15px">
        <h2 class="widget-component-title">Historique</h2>
        <div>
            <canvas id="temperatureChart" width="400" height="200"></canvas>
        </div>
        <div>
            <canvas id="humidityChartHistory" width="400" height="200"></canvas>
        </div>
        <div>
            <canvas id="co2ChartHistory" width="400" height="200"></canvas>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Configuration for metrics
        {% if data.co2 is defined %}
        const co2Value = {{ data.co2 }};
        {% else %}
        const co2Value = 0;
        {% endif %}

        {% if data.hum is defined %}
        const humidityValue = {{ data.hum }};
        {% else %}
        const humidityValue = 0;
        {% endif %}

        const maxCo2 = 2000;
        const maxHumidity = 100;

        // Function to draw a symmetric arc with specific rotations
        const drawSymmetricArc = (ctx, value, max, color, isCo2) => {
            const yPos = 120;
            let startAngle, endAngle, backgroundAngle, xPos = yPos;
            value = value >= max ? max : value;
            value = value <= 0 ? 0 : value;
            if(isCo2 === true) {
                startAngle = Math.PI * 0.5;
                endAngle = startAngle + (value / max) * Math.PI;
                backgroundAngle = startAngle;
                xPos += 110;
            } else {
                endAngle = Math.PI * 0.5;
                startAngle = endAngle - (value / max) * Math.PI;
                backgroundAngle = Math.PI * 1.5;
                xPos -= 110;
            }

            // Background circle (gray)
            ctx.beginPath();
            ctx.arc(xPos, yPos, 100, backgroundAngle, backgroundAngle + Math.PI); // Background is 180°
            ctx.lineWidth = 30;
            ctx.strokeStyle = '#E5E5E5';
            ctx.stroke();

            // Colored arc
            ctx.beginPath();
            ctx.arc(xPos, yPos, 100, startAngle, endAngle);
            ctx.lineWidth = 30;
            ctx.strokeStyle = color;
            ctx.stroke();
        };

        // Draw charts
        const co2Ctx = document.getElementById('co2Chart').getContext('2d');
        const humidityCtx = document.getElementById('humidityChart').getContext('2d');

        // CO2 Arc (left)
        drawSymmetricArc(co2Ctx, co2Value, maxCo2, '#F39C12', true); // CO2 (orange)

        // Humidity Arc (right)
        drawSymmetricArc(humidityCtx, humidityValue, maxHumidity, '#3498DB', false); // Humidity (blue)

        // Style for threshold lines
        co2Ctx.setLineDash([8, 3]);
        co2Ctx.lineWidth = 5;
        co2Ctx.strokeStyle = '#FF6767';
        humidityCtx.setLineDash([8, 3]);
        humidityCtx.lineWidth = 5;
        humidityCtx.strokeStyle = '#FF6767';

        // Threshold lines for CO2 (1500 PPM max 2000)
        co2Ctx.beginPath();
        co2Ctx.moveTo(148, 39);
        co2Ctx.lineTo(170, 59);
        co2Ctx.stroke();

        // Threshold lines for humidity (40% and 70%)
        humidityCtx.beginPath();
        humidityCtx.moveTo(91, 146);
        humidityCtx.lineTo(120, 157);
        humidityCtx.stroke();

        humidityCtx.beginPath();
        humidityCtx.moveTo(78, 69);
        humidityCtx.lineTo(103, 53);
        humidityCtx.stroke();


        // Retrieve chart data passed from PHP
        const labelsTemp = {{ chartTemp.dates|json_encode|raw }}; // Dates for the x-axis
        const valuesTemp = {{ chartTemp.values|json_encode|raw }}; // Temperature values for the y-axis

        const labelsHum = {{ chartHum.dates|json_encode|raw }}; // Dates for the x-axis
        const valuesHum = {{ chartHum.values|json_encode|raw }}; // Humidity values for the y-axis

        const labelsCo2 = {{ chartCO2.dates|json_encode|raw }}; // Dates for the x-axis
        const valuesCo2 = {{ chartCO2.values|json_encode|raw }}; // CO2 values for the y-axis

        // Temperature chart
        const temperatureChartCtx = document.getElementById('temperatureChart').getContext('2d');
        const temperatureChart = new Chart(temperatureChartCtx, {
            type: 'line',
            data: {
                labels: labelsTemp,
                datasets: [{
                    label: 'Température (°C)',
                    data: valuesTemp,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgb(75,191,191,0.2)',
                    borderWidth: 2,
                    tension: 0.4,
                    pointRadius: 0,
                    pointHoverRadius: 0
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Température des 7 derniers jours' }
                },
                scales: {
                    x: {
                        title: { display: true, text: 'Date' }
                    },
                    y: {
                        title: { display: true, text: 'Température (°C)'},
                        suggestedMin: 0, // Suggested minimum value for y-axis
                        suggestedMax: 30 // Suggested maximum value for y-axis
                    }
                }
            }
        });


        // Humidity chart
        const humidityChartCtx = document.getElementById('humidityChartHistory').getContext('2d');
        const humidityChart = new Chart(humidityChartCtx, {
            type: 'line',
            data: {
                labels: labelsHum,
                datasets: [{
                    label: 'Humidité (%)',
                    data: valuesHum,
                    borderColor: 'rgb(52,151,218)',
                    backgroundColor: 'rgb(52,150,217,0.2)',
                    borderWidth: 2,
                    tension: 0.4,
                    pointRadius: 0,
                    pointHoverRadius: 0
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Humidité des 7 derniers jours' }
                },
                scales: {
                    x: { title: { display: true, text: 'Date' } },
                    y: {
                        title: { display: true, text: 'Humidité (%)' },
                        suggestedMin: 0,
                        suggestedMax: 100
                    }
                }
            }
        });

        // CO2 chart
        const co2ChartCtx = document.getElementById('co2ChartHistory').getContext('2d');
        const co2Chart = new Chart(co2ChartCtx, {
            type: 'line',
            data: {
                labels: labelsCo2,
                datasets: [{
                    label: 'CO2 (PPM)',
                    data: valuesCo2,
                    borderColor: 'rgb(241,155,18)',
                    backgroundColor: 'rgb(239,154,18,0.2)',
                    borderWidth: 2,
                    tension: 0.4,
                    pointRadius: 0,
                    pointHoverRadius: 0
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Niveaux de CO2 des 7 derniers jours' }
                },
                scales: {
                    x: { title: { display: true, text: 'Date' } },
                    y: {
                        title: { display: true, text: 'CO2 (PPM)' },
                        suggestedMin: 0,
                        suggestedMax: 2000
                    }
                }
            }
        });
    </script>

{% endblock %}